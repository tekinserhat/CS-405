/**
 * 
 * @TASK1 Calculate the model view matrix by using the chatGPT
 */

function getChatGPTModelViewMatrix() {
    const transformationMatrix = new Float32Array([
            
        
            0.1767767, -0.30618622, 0.35355339, 0.3,    // First row
            0.46338835, 0.06341324, -0.1767767, -0.25,  // Second row
            0.12682648, 0.78033009, 0.61237244, 0,      // Third row
            0, 0, 0, 1                                   // Fourth row (homogeneous coordinate)
        





        // calculated with the both python and javascript code piecees 
    ]);

    return getTransposeMatrix(transformationMatrix); 
}

/*const transformationMatrix = new Float32Array([
    0.1767767, -0.30618622, 0.35355339, 0.3,    // First row
    0.46338835, 0.06341324, -0.1767767, -0.25,  // Second row
    0.12682648, 0.78033009, 0.61237244, 0,      // Third row
    0, 0, 0, 1                                   // Fourth row (homogeneous coordinate)
]); 


        0.17677669529663692, -0.28661165235168157, 0.36959945987005827, 0.3,    // First row
        0.3061862178478973, 0.3695994598700583, 0.1401650429449553, -0.25,      // Second row
        -0.7071067811865475, 0.35355339059327373, 0.6123724356957946, 0,        // Third row
        0, 0, 0, 1                                                              // Fourth row (homogeneous coordinate) 


*/



/**
 * 
 * @TASK2 Calculate the model view matrix by using the given 
 * transformation methods and required transformation parameters
 * stated in transformation-prompt.txt
 */
// calculate the model view matrix by using the transformation
// methods and return the modelView matrix in this method
function getModelViewMatrix() {
    // First, apply translation
    const translationMatrix = createTranslationMatrix(0.3, -0.25, 0); // x=0.3, y=-0.25, z=0

    // Then apply scaling
    const scaleMatrix = createScaleMatrix(0.5, 0.5, 1); // scale x by 0.5, y by 0.5, z by 1

    // Then apply rotation in the order of X, Y, Z
    const rotationX = createRotationMatrix_X(Math.PI / 6); // 30 degrees
    const rotationY = createRotationMatrix_Y(Math.PI / 4); // 45 degrees
    const rotationZ = createRotationMatrix_Z(Math.PI / 3); // 60 degrees

    // Now multiply them in the correct order: translation * scale * rotationZ * rotationY * rotationX
    let modelViewMatrix = multiplyMatrices(translationMatrix, scaleMatrix);
    modelViewMatrix = multiplyMatrices(modelViewMatrix, rotationX); // First rotate by X
    modelViewMatrix = multiplyMatrices(modelViewMatrix, rotationY); // Then by Y
    modelViewMatrix = multiplyMatrices(modelViewMatrix, rotationZ); // Then by Z

    return getTransposeMatrix(modelViewMatrix); // return the transposed matrix 
}




/**
 * 
 * @TASK3 Ask CHAT-GPT to animate the transformation calculated in 
 * task2 infinitely with a period of 10 seconds. 
 * First 5 seconds, the cube should transform from its initial 
 * position to the target position.
 * The next 5 seconds, the cube should return to its initial position.
 */

    // this metdo should return the model view matrix at the given time
    // to get a smooth animation

    function getPeriodicMovement(startTime) {
        const duration = 10; // total duration for the animation in seconds
        const halfDuration = duration / 2; // half duration for the transition
        const currentTime = (performance.now() - startTime) / 1000; // get time in seconds
    
        // Normalize time to a 0 to 1 range for the current period
        const normalizedTime = (currentTime % duration) / duration;
    
        // Define the initial transformation matrix from Task 1
        const initialMatrix = new Float32Array([
            0.1767767, -0.30618622, 0.35355339, 0.3,    // First row
            0.46338835, 0.06341324, -0.1767767, -0.25,  // Second row
            0.12682648, 0.78033009, 0.61237244, 0,      // Third row
            0, 0, 0, 1                                   // Fourth row (homogeneous coordinate)
        ]);
    
        // Define the transformation matrix for Task 2
        const task2Matrix = new Float32Array([
            // Paste the transformation matrix from Task 2 here
            0.1767767, -0.28661165,  0.36959946,  0.3,
            0.30618622,  0.36959946,  0.14016504, -0.25,
            -0.70710678,  0.35355339,  0.61237244,  0,
            0, 0, 0, 1
        ]);
    
        let transformationMatrix = new Float32Array(16);
        
        if (normalizedTime < 0.5) {
            // Transition to final position (Task 2 transformation)
            const t = normalizedTime / 0.5; // normalize to 0 to 1 over the first 5 seconds
            for (let i = 0; i < 16; i++) {
                transformationMatrix[i] = initialMatrix[i] + (task2Matrix[i] - initialMatrix[i]) * t;
            }
        } else {
            // Transition back to initial position
            const t = (normalizedTime - 0.5) / 0.5; // normalize to 0 to 1 over the last 5 seconds
            for (let i = 0; i < 16; i++) {
                transformationMatrix[i] = task2Matrix[i] + (initialMatrix[i] - task2Matrix[i]) * t;
            }
        }
    
        return getTransposeMatrix(transformationMatrix);
    }
    
